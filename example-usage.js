/**
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô cards.json ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏¢‡∏Å‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß
 * 
 * ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ Base64 Image Extractor ‡πÅ‡∏¢‡∏Å‡∏†‡∏≤‡∏û‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å cards.json ‡πÅ‡∏•‡πâ‡∏ß
 * ‡πÑ‡∏ü‡∏•‡πå JSON ‡∏à‡∏∞‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÅ‡∏ó‡∏ô base64 data
 * 
 * ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:
 * goolaxy/
 * ‚îú‚îÄ‚îÄ cards_updated.json          // JSON ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
 * ‚îú‚îÄ‚îÄ uuid-mapping.json           // ‡πÑ‡∏ü‡∏•‡πå mapping
 * ‚îú‚îÄ‚îÄ images/                     // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏†‡∏≤‡∏û
 * ‚îÇ   ‚îú‚îÄ‚îÄ card_001.png
 * ‚îÇ   ‚îú‚îÄ‚îÄ card_002.jpg
 * ‚îÇ   ‚îî‚îÄ‚îÄ ...
 * ‚îî‚îÄ‚îÄ src/
 *     ‚îî‚îÄ‚îÄ main.js                 // ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
 */

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î cards.json ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
async function loadCards() {
    try {
        // ‡πÇ‡∏´‡∏•‡∏î JSON ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß (‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏•‡∏á ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ base64)
        const response = await fetch('./cards_updated.json');
        const cardsData = await response.json();
        
        console.log('üìÑ ‡πÇ‡∏´‡∏•‡∏î cards.json ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        console.log('üé¥ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î:', cardsData.cards ? cardsData.cards.length : 0);
        
        return cardsData;
        
    } catch (error) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î cards.json ‡πÑ‡∏î‡πâ:', error);
        
        // Fallback: ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
        try {
            const fallbackResponse = await fetch('./cards.json');
            const fallbackData = await fallbackResponse.json();
            console.log('‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå cards.json ‡πÄ‡∏î‡∏¥‡∏° (‡∏°‡∏µ base64)');
            return fallbackData;
        } catch (fallbackError) {
            console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏î‡πÜ ‡πÑ‡∏î‡πâ:', fallbackError);
            throw fallbackError;
        }
    }
}

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πå‡∏î
async function loadCardImage(card) {
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô base64 ‡∏´‡∏£‡∏∑‡∏≠ file path
        if (card.image && card.image.startsWith('data:image/')) {
            // ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô base64 - ‡∏™‡∏£‡πâ‡∏≤‡∏á Image element ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            return new Promise((resolve, reject) => {
                const img = new Image();
                img.onload = () => resolve(img);
                img.onerror = reject;
                img.src = card.image;
            });
            
        } else if (card.image) {
            // ‡πÄ‡∏õ‡πá‡∏ô file path - ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
            return new Promise((resolve, reject) => {
                const img = new Image();
                img.onload = () => {
                    console.log(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${card.image}`);
                    resolve(img);
                };
                img.onerror = (error) => {
                    console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: ${card.image}`, error);
                    reject(error);
                };
                
                // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CORS ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                img.crossOrigin = 'anonymous';
                img.src = card.image;
            });
            
        } else {
            throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î');
        }
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û:', error);
        throw error;
    }
}

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö Three.js
async function createCardMesh(card, scene) {
    try {
        // ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πå‡∏î
        const image = await loadCardImage(card);
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á texture ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û
        const texture = new THREE.Texture(image);
        texture.needsUpdate = true;
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á material
        const material = new THREE.MeshBasicMaterial({
            map: texture,
            transparent: true,
            side: THREE.DoubleSide
        });
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á geometry
        const geometry = new THREE.PlaneGeometry(2, 3); // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πå‡∏î
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á mesh
        const mesh = new THREE.Mesh(geometry, material);
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        mesh.userData = {
            cardId: card.id,
            cardName: card.name,
            cardType: card.type
        };
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ scene
        scene.add(mesh);
        
        console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î mesh ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${card.name}`);
        return mesh;
        
    } catch (error) {
        console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î mesh ‡πÑ‡∏î‡πâ: ${card.name}`, error);
        throw error;
    }
}

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function loadAllCards(scene) {
    try {
        console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...');
        
        // ‡πÇ‡∏´‡∏•‡∏î cards data
        const cardsData = await loadCards();
        
        if (!cardsData.cards || !Array.isArray(cardsData.cards)) {
            throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        }
        
        const cards = cardsData.cards;
        const cardMeshes = [];
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡πÉ‡∏ö (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á)
        for (let i = 0; i < cards.length; i++) {
            const card = cards[i];
            
            try {
                const mesh = await createCardMesh(card, scene);
                
                // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß
                const row = Math.floor(i / 10);
                const col = i % 10;
                mesh.position.set(col * 2.5 - 11.25, -row * 4, 0);
                
                cardMeshes.push(mesh);
                
                // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
                if ((i + 1) % 10 === 0 || i === cards.length - 1) {
                    console.log(`üìä ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß: ${i + 1}/${cards.length} ‡∏Å‡∏≤‡∏£‡πå‡∏î`);
                }
                
                // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
                if (i % 5 === 0) {
                    await new Promise(resolve => setTimeout(resolve, 10));
                }
                
            } catch (error) {
                console.error(`‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î ${card.name}:`, error.message);
            }
        }
        
        console.log(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${cardMeshes.length}/${cards.length} ‡∏Å‡∏≤‡∏£‡πå‡∏î`);
        return cardMeshes;
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πå‡∏î:', error);
        throw error;
    }
}

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô main.js
async function initializeCardSystem(scene) {
    try {
        console.log('üé¥ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î...');
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const cardMeshes = await loadAllCards(scene);
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î
        const cardGroup = new THREE.Group();
        cardMeshes.forEach(mesh => cardGroup.add(mesh));
        scene.add(cardGroup);
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        setupCardInteraction(cardMeshes);
        
        console.log('‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
        return cardGroup;
        
    } catch (error) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÑ‡∏î‡πâ:', error);
        throw error;
    }
}

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö
function setupCardInteraction(cardMeshes) {
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const raycaster = new THREE.Raycaster();
    const mouse = new THREE.Vector2();
    
    function onCardClick(event) {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏°‡∏≤‡∏™‡πå
        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô
        raycaster.setFromCamera(mouse, camera);
        const intersects = raycaster.intersectObjects(cardMeshes);
        
        if (intersects.length > 0) {
            const selectedCard = intersects[0].object;
            const cardData = selectedCard.userData;
            
            console.log('üé¥ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î:', cardData.cardName);
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î
            showCardInfo(cardData);
        }
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener
    window.addEventListener('click', onCardClick);
}

function showCardInfo(cardData) {
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î
    const info = `
üé¥ ‡∏Å‡∏≤‡∏£‡πå‡∏î: ${cardData.cardName}
üÜî ID: ${cardData.cardId}
üè∑Ô∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${cardData.cardType}
    `;
    
    console.log(info);
    
    // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô UI ‡πÑ‡∏î‡πâ
    // document.getElementById('cardInfo').textContent = info;
}

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Preload
async function preloadCardImages(cardsData) {
    console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á preload ‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πå‡∏î...');
    
    const imagePromises = cardsData.cards.map(async (card, index) => {
        try {
            await loadCardImage(card);
            
            if ((index + 1) % 20 === 0) {
                console.log(`üìä Preload: ${index + 1}/${cardsData.cards.length}`);
            }
            
            return true;
        } catch (error) {
            console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ preload ‡∏Å‡∏≤‡∏£‡πå‡∏î ${card.name}:`, error.message);
            return false;
        }
    });
    
    const results = await Promise.all(imagePromises);
    const successCount = results.filter(Boolean).length;
    
    console.log(`‚úÖ Preload ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${successCount}/${cardsData.cards.length} ‡∏†‡∏≤‡∏û`);
    return successCount;
}

// Export functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô main.js
export {
    loadCards,
    loadCardImage,
    createCardMesh,
    loadAllCards,
    initializeCardSystem,
    preloadCardImages
};

/**
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô main.js:
 * 
 * import { initializeCardSystem } from './example-usage.js';
 * 
 * // ‡πÉ‡∏ô init function
 * async function init() {
 *     // ‡∏™‡∏£‡πâ‡∏≤‡∏á scene, camera, renderer
 *     const scene = new THREE.Scene();
 *     // ...
 *     
 *     // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î
 *     try {
 *         const cardGroup = await initializeCardSystem(scene);
 *         console.log('‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
 *     } catch (error) {
 *         console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÑ‡∏î‡πâ:', error);
 *     }
 * }
 */